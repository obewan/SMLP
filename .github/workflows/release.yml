name: Build and Release

on:
  push:
    tags:
      - "*"

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        config:
          - {
              name: "Ubuntu Latest GCC",
              artifact: "Linux.tar.xz",
              build_type: "Release",
              executable: "smlp",
              cc: "gcc-11",
              cxx: "g++-11",
            }
          - {
              name: "Windows Latest MSVC",
              artifact: "Windows-MSVC.tar.xz",
              build_type: "Release",
              executable: "Release/smlp.exe",
              cc: "cl",
              cxx: "cl",
              environment_script: "C:/Program Files (x86)/Microsoft Visual Studio/2019/Enterprise/VC/Auxiliary/Build/vcvars64.bat",
            }

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Debugging information
        shell: bash
        run: |
          echo PATH=$PATH
          which ${{ matrix.config.cc }}
          which ${{ matrix.config.cxx }}

      - name: Setup MSVC environment
        if: matrix.config.environment_script
        shell: cmd
        run: call "${{ matrix.config.environment_script }}"

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} -DCMAKE_C_COMPILER=${{ matrix.config.cc }} -DCMAKE_CXX_COMPILER=${{ matrix.config.cxx }}

      - name: Build
        shell: bash
        run: cmake --build build

      - name: Test
        shell: bash
        run: ctest --test-dir build

      - name: Install
        shell: bash
        run: cmake --install build --prefix install

      - name: Package
        shell: bash
        run: |
          cp ./${{ matrix.config.executable }} ./install/ 
          cp -r ./i18n ./install/
          tar -czvf ${{ matrix.config.artifact }} -C install

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}
          asset_content_type: application/gzip
