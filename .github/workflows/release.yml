name: Release

on:
  push:
    tags:
      - "*"

jobs:
  create_release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pages: write
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
    steps:
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

  build:
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        include:
          - os: ubuntu-latest
            name: "Linux"
            artifact: "Linux.tar.xz"
            build_type: "Release"
            cc: "gcc-11"
            cxx: "g++-11"
            compiler_flags: ""
            is_linux: true
          - os: windows-latest
            name: "Windows x64"
            artifact: "Windows-x64.tar.xz"
            build_type: "Release"
            cc: "cl"
            cxx: "cl"
            compiler_flags: "/EHsc /wd4514 /wd4625 /wd4626 /wd4820 /wd5027"
            is_windows: true

    runs-on: ${{ matrix.os }}

    permissions:
      contents: write
      pages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup MSVC environment
        if: matrix.is_windows
        uses: microsoft/setup-msbuild@v2
        with:
          msbuild-architecture: x64

      - name: Configure CMake
        shell: bash
        run: |
          cmake -B build \
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
          -DCMAKE_C_COMPILER=${{ matrix.cc }} \
          -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} \
          -DCMAKE_CXX_FLAGS:STRING="'${{ matrix.compiler_flags }}'"

      - name: Build
        shell: bash
        run: cmake --build build --config ${{ matrix.build_type }}

      - name: Install
        shell: bash
        run: cmake --install build --prefix install --config ${{ matrix.build_type }}

      - name: Package
        shell: bash
        run: tar -czvf ${{ matrix.artifact }} -C install .

      - name: Upload Release Asset
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ needs.create_release.outputs.upload_url }}
          asset_path: ./${{ matrix.artifact }}
          asset_name: ${{ matrix.artifact }}
          asset_content_type: application/gzip
